class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> result=new ArrayList<>();
        makeback(0,s,new ArrayList<>(),result);
        return result; 
    }

    public void makeback(int index,String s,List<String> current,List<List<String>> result)
    {
        if(index==s.length())
        {
            result.add(new ArrayList<>(current));
            return;
        }

        for(int i=index; i<s.length(); i++)
        {
            if(paindrome(s,index,i))
            {
                current.add(s.substring(index, i + 1));  // Choose
                makeback(i + 1, s, current, result);  // Explore
                current.remove(current.size() - 1); //backtrack
            }

        }
    }

    public boolean paindrome(String s,int start,int end)
    {
        while(start<end)
        {
            if(s.charAt(start)!=s.charAt(end))return false;
            start++;
            end--;
        }
        return true;

    }
}
