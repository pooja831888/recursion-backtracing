class Solution {
    public List<List<Integer>> permute(int[] nums) {
       List<List<Integer>> result=new ArrayList<>();
       boolean[] used=new boolean[nums.length];
       permuteHelper(nums,new ArrayList<>(),result,used);
       return result; 
        
    }

    private void permuteHelper(int [] nums, List<Integer> current,List<List<Integer>> result,boolean[] used)
    {
         if (current.size() == nums.length) {
            result.add(new ArrayList<>(current)); // add a copy of current permutation
            return;
        }


        for(int i=0; i<nums.length; i++)
        {
            if(used[i])continue;
            used[i]=true;
            current.add(nums[i]);
            permuteHelper(nums,current,result,used);
            current.remove(current.size()-1);
            used[i]=false;
        }
    }
}
