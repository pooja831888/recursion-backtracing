class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> result=new ArrayList<>();
        boolean used[]=new boolean[nums.length];
        permuteUniquehelper(nums,result,new ArrayList<>(),used);
        return result;    
    }

    private void permuteUniquehelper(int[] nums,List<List<Integer>> result,List<Integer> current,boolean used[])
    {
        if(current.size()==nums.length)
        {
            result.add(new ArrayList<>(current));
            return ;
        }

        for(int i=0; i<nums.length; i++)
        {
             if (i > 0 && nums[i] == nums[i - 1] && !used[i - 1]) continue;
            if(used[i])continue;
            current.add(nums[i]);
            used[i]=true;
            permuteUniquehelper(nums,result,current,used);
            current.remove(current.size()-1);
            used[i]=false;
        }
    }
}
